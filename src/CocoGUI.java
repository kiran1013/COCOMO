/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cocomo;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.PageSize;
import java.awt.Color;
import java.io.IOException;
import java.io.PrintWriter;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/***************************************************************
 * Leave your initials after each significant comment please   *
 *                                                             *
 * -ke for Kiran Eastman                                       *
 * -nj for Noel James                                          *
 * -wk for William Kelly                                       *
 ***************************************************************/
public class CocoGUI extends javax.swing.JFrame {

    //Main objects to perform operations and estimations with
    //basicObj utilizes Basic COCOMO
    //interObj utilizes Intermediate COCOMO -ke
    COCOMO_ADT basicObj;
    Intermediate_ADT interObj;
    
    //A string to hold the type of obj
    boolean isOrganic = false;
    boolean isSemi = false;
    boolean isEmbedded = false;
    boolean upperValid = false;
    boolean lowerValid = false;
    
    //Source Lines upper and lower boundaries variables
    //default values are 0
    int SLLow = 0;
    int SLHigh = 0;
    
    
    String filename = "default";
    
    //array to hold all 15 of the drivers values
    double[] d = new double[15];

    /***
     * Fonts for the PDF
     */
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                        Font.BOLD);
    private static Font driverFont = new Font(Font.FontFamily.TIMES_ROMAN, 14,
                        Font.ITALIC);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                        Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                        Font.BOLD);
    
    
    
    
    
    
    
    /**
     * Creates new form CocoGUI
     */
    public CocoGUI() {
        initComponents();
        this.setTitle("COCOMO");
        Results.setTitle("Estimations");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SDMGroup = new javax.swing.ButtonGroup();
        Results = new javax.swing.JFrame();
        closeButton = new javax.swing.JButton();
        exportResultsButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        interCostLabelLow = new javax.swing.JLabel();
        highCostLabel16 = new javax.swing.JLabel();
        timeLabel7 = new javax.swing.JLabel();
        basicTimeLabelHigh = new javax.swing.JLabel();
        basicCostLabelHigh = new javax.swing.JLabel();
        lowCostLabel16 = new javax.swing.JLabel();
        basicTimeLabelLow = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        interCostLabelHigh = new javax.swing.JLabel();
        lowCostLabel17 = new javax.swing.JLabel();
        highCostLabel17 = new javax.swing.JLabel();
        interTimeLabelLow = new javax.swing.JLabel();
        costLabel7 = new javax.swing.JLabel();
        basicCostLabelLow = new javax.swing.JLabel();
        interTimeLabelHigh = new javax.swing.JLabel();
        saveDialog = new javax.swing.JDialog();
        filenameLabel = new java.awt.Label();
        saveTextField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        cocomoHelpFrame = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        helpText = new javax.swing.JTextArea();
        tableFrame = new javax.swing.JFrame();
        exportDialog = new javax.swing.JDialog();
        exportButton = new javax.swing.JButton();
        exportFilenameLabel = new java.awt.Label();
        exportTextField = new javax.swing.JTextField();
        cancelButton1 = new javax.swing.JButton();
        successExport = new javax.swing.JDialog();
        closeSuccess = new javax.swing.JButton();
        successLabel = new javax.swing.JLabel();
        SLOCTitle = new javax.swing.JLabel();
        SLOCDescription = new javax.swing.JLabel();
        SLOCInstruction = new javax.swing.JLabel();
        lowerBoundInput = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        SDMTitle = new javax.swing.JLabel();
        SDMLabel1 = new javax.swing.JLabel();
        SDMLabel2 = new javax.swing.JLabel();
        SDMLabel3 = new javax.swing.JLabel();
        SDMLabel4 = new javax.swing.JLabel();
        SDMLabel5 = new javax.swing.JLabel();
        organicMode = new javax.swing.JRadioButton();
        semiDetatchedMode = new javax.swing.JRadioButton();
        Embedded = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        SDCTitle1 = new javax.swing.JLabel();
        SDCLabel1 = new javax.swing.JLabel();
        SDCLabel2 = new javax.swing.JLabel();
        DriverTitle1 = new javax.swing.JLabel();
        driverRating1 = new javax.swing.JSlider();
        DriverTitle2 = new javax.swing.JLabel();
        DriverTitle3 = new javax.swing.JLabel();
        driverRating3 = new javax.swing.JSlider();
        driverRating10 = new javax.swing.JSlider();
        DriverTitle4 = new javax.swing.JLabel();
        DriverTitle5 = new javax.swing.JLabel();
        DriverTitle6 = new javax.swing.JLabel();
        driverRating8 = new javax.swing.JSlider();
        DriverTitle7 = new javax.swing.JLabel();
        driverRating9 = new javax.swing.JSlider();
        DriverTitle8 = new javax.swing.JLabel();
        driverRating15 = new javax.swing.JSlider();
        driverRating14 = new javax.swing.JSlider();
        DriverTitle9 = new javax.swing.JLabel();
        driverRating13 = new javax.swing.JSlider();
        DriverTitle10 = new javax.swing.JLabel();
        DriverTitle11 = new javax.swing.JLabel();
        driverRating12 = new javax.swing.JSlider();
        driverRating11 = new javax.swing.JSlider();
        DriverTitle12 = new javax.swing.JLabel();
        driverRating6 = new javax.swing.JSlider();
        DriverTitle13 = new javax.swing.JLabel();
        driverRating5 = new javax.swing.JSlider();
        DriverTitle14 = new javax.swing.JLabel();
        driverRating4 = new javax.swing.JSlider();
        DriverTitle15 = new javax.swing.JLabel();
        SDCTitle2 = new javax.swing.JLabel();
        SDCTitle3 = new javax.swing.JLabel();
        SDCTitle4 = new javax.swing.JLabel();
        SDCTitle5 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        driverRating7 = new javax.swing.JSlider();
        DriverTitle16 = new javax.swing.JLabel();
        DriverTitle17 = new javax.swing.JLabel();
        DriverTitle18 = new javax.swing.JLabel();
        DriverTitle19 = new javax.swing.JLabel();
        DriverTitle20 = new javax.swing.JLabel();
        DriverTitle21 = new javax.swing.JLabel();
        DriverTitle22 = new javax.swing.JLabel();
        DriverTitle23 = new javax.swing.JLabel();
        DriverTitle24 = new javax.swing.JLabel();
        DriverTitle25 = new javax.swing.JLabel();
        DriverTitle26 = new javax.swing.JLabel();
        DriverTitle27 = new javax.swing.JLabel();
        DriverTitle28 = new javax.swing.JLabel();
        DriverTitle29 = new javax.swing.JLabel();
        DriverTitle30 = new javax.swing.JLabel();
        reset = new javax.swing.JButton();
        lowerBoundLabel = new javax.swing.JLabel();
        upperBoundLabel = new javax.swing.JLabel();
        upperBoundInput = new javax.swing.JTextField();
        driverRating2 = new javax.swing.JSlider();
        menuBar = new javax.swing.JMenuBar();
        helpMenu = new javax.swing.JMenu();
        cocomoHelp = new javax.swing.JMenuItem();

        Results.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        exportResultsButton.setText("Export Results as PDF");
        exportResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportResultsButtonActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel18.setText("Intermediate");

        interCostLabelLow.setText("interCostLabelLow");

        highCostLabel16.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        highCostLabel16.setText("High:");

        timeLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        timeLabel7.setText("Estimated Development Time");

        basicTimeLabelHigh.setText("basicTimeLabelHigh");

        basicCostLabelHigh.setText("basicCostLabelHigh");

        lowCostLabel16.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        lowCostLabel16.setText("Low:");

        basicTimeLabelLow.setText("basicTimeLabelLow");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setText("Basic");

        interCostLabelHigh.setText("interCostLabelHigh");

        lowCostLabel17.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        lowCostLabel17.setText("Low:");

        highCostLabel17.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        highCostLabel17.setText("High:");

        interTimeLabelLow.setText("interTimeLabelLow");

        costLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        costLabel7.setText("Estimated Cost");

        basicCostLabelLow.setText("basicCostLabelLow");

        interTimeLabelHigh.setText("interTimeLabelHigh");

        javax.swing.GroupLayout ResultsLayout = new javax.swing.GroupLayout(Results.getContentPane());
        Results.getContentPane().setLayout(ResultsLayout);
        ResultsLayout.setHorizontalGroup(
            ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportResultsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addGap(40, 40, 40))
            .addGroup(ResultsLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(costLabel7)
                    .addComponent(timeLabel7))
                .addGap(32, 32, 32)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(highCostLabel16)
                    .addComponent(lowCostLabel16)
                    .addComponent(lowCostLabel17)
                    .addComponent(highCostLabel17))
                .addGap(54, 54, 54)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basicCostLabelLow)
                    .addComponent(jLabel17)
                    .addComponent(basicTimeLabelLow)
                    .addComponent(basicTimeLabelHigh)
                    .addComponent(basicCostLabelHigh))
                .addGap(100, 100, 100)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interCostLabelHigh)
                    .addComponent(interTimeLabelLow)
                    .addComponent(jLabel18)
                    .addComponent(interTimeLabelHigh)
                    .addComponent(interCostLabelLow))
                .addGap(25, 25, 25))
        );
        ResultsLayout.setVerticalGroup(
            ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultsLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addGap(22, 22, 22)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(costLabel7)
                    .addComponent(lowCostLabel16)
                    .addComponent(basicCostLabelLow)
                    .addComponent(interCostLabelLow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(highCostLabel16)
                    .addComponent(basicCostLabelHigh)
                    .addComponent(interCostLabelHigh))
                .addGap(50, 50, 50)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel7)
                    .addComponent(lowCostLabel17)
                    .addComponent(basicTimeLabelLow)
                    .addComponent(interTimeLabelLow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(highCostLabel17)
                    .addComponent(basicTimeLabelHigh)
                    .addComponent(interTimeLabelHigh))
                .addGap(25, 25, 25)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(exportResultsButton))
                .addGap(25, 25, 25))
        );

        filenameLabel.setText("Enter a filename:");

        saveTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                saveTextFieldInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        saveTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTextFieldActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout saveDialogLayout = new javax.swing.GroupLayout(saveDialog.getContentPane());
        saveDialog.getContentPane().setLayout(saveDialogLayout);
        saveDialogLayout.setHorizontalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(saveDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, saveDialogLayout.createSequentialGroup()
                        .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(saveTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        saveDialogLayout.setVerticalGroup(
            saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveDialogLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(saveDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        filenameLabel.getAccessibleContext().setAccessibleName("");

        helpText.setColumns(20);
        helpText.setRows(5);
        helpText.setText("Contact Email: kiraneast1013@gmail.com\n\n\n\nThe Constructive Cost Model (COCOMO) is a procedural software cost estimation \nmodel developed by Barry W. Boehm. The model parameters are derived from fitting \na regression formula using data from historical projects (61 projects for COCOMO \n81 and 163 projects for COCOMO II).\n\nBasic COCOMO compute software development effort (and cost) as a function of \nprogram size. Program size is expressed in estimated thousands of source lines \nof code (SLOC, KLOC).\n\nCOCOMO applies to three classes of software projects:\n\tOrganic projects - \"small\" teams with \"good\" experience working with \n\t\"less than rigid\" requirements.\n\n\tSemi-detached projects - \"medium\" teams with mixed experience working\n\twith a mix of rigid and less than rigid requirements.\n\n\tEmbedded projects - developed within a set of \"tight\" constraints. It\n\tis also combination of organic and semi-detached projects.(hardware, \n\tsoftware, operational, ...)\n\nBasic COCOMO is good for quick estimate of software costs. However it does not\naccount for differences in hardware constraints, personnel quality and \nexperience, use of modern tools and techniques, and so on.\n\n\n\nIntermediate COCOMO computes software development effort as function of \nprogram size and a set of \"cost drivers\" that include subjective assessment \nof product, hardware, personnel and project attributes. This extension \nconsiders a set of four \"cost drivers\", each with a number of subsidiary \nattributes:\n\nProduct attributes\n\tRequired software reliability\n\tSize of application database\n\tComplexity of the product\n\n\nHardware attributes\n\tRun-time performance constraints\n\tMemory constraints\n\tVolatility of the virtual machine environment\n\tRequired turnabout time\n\n\nPersonnel attributes\n\tAnalyst capability\n\tSoftware engineering capability\n\tApplications experience\n\tVirtual machine experience\n\tProgramming language experience\n\n\nProject attributes\n\tUse of software tools\n\tApplication of software engineering methods\n\tRequired development schedule\n\n\nEach of the 15 attributes receives a rating on a six-point scale that ranges \nfrom \"very low\" to \"extra high\" (in importance or value). An effort multiplier \nfrom the table below applies to the rating. The product of all effort \nmultipliers results in an effort adjustment factor (EAF). Typical values for \nEAF range from 0.9 to 1.4.\n\n\nFor COCOMO formulas visit \nhttp://www.mhhe.com/engcs/compsci/pressman/information/olc/COCOMO.html");
        jScrollPane1.setViewportView(helpText);

        javax.swing.GroupLayout cocomoHelpFrameLayout = new javax.swing.GroupLayout(cocomoHelpFrame.getContentPane());
        cocomoHelpFrame.getContentPane().setLayout(cocomoHelpFrameLayout);
        cocomoHelpFrameLayout.setHorizontalGroup(
            cocomoHelpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cocomoHelpFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                .addContainerGap())
        );
        cocomoHelpFrameLayout.setVerticalGroup(
            cocomoHelpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cocomoHelpFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout tableFrameLayout = new javax.swing.GroupLayout(tableFrame.getContentPane());
        tableFrame.getContentPane().setLayout(tableFrameLayout);
        tableFrameLayout.setHorizontalGroup(
            tableFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1091, Short.MAX_VALUE)
        );
        tableFrameLayout.setVerticalGroup(
            tableFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 613, Short.MAX_VALUE)
        );

        exportButton.setText("Export");
        exportButton.setEnabled(false);
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        exportFilenameLabel.setText("Enter a filename:");

        exportTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                exportTextFieldInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        exportTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTextFieldActionPerformed(evt);
            }
        });

        cancelButton1.setText("Cancel");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout exportDialogLayout = new javax.swing.GroupLayout(exportDialog.getContentPane());
        exportDialog.getContentPane().setLayout(exportDialogLayout);
        exportDialogLayout.setHorizontalGroup(
            exportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(exportDialogLayout.createSequentialGroup()
                        .addComponent(exportButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton1))
                    .addGroup(exportDialogLayout.createSequentialGroup()
                        .addComponent(exportFilenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(exportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        exportDialogLayout.setVerticalGroup(
            exportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportDialogLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(exportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exportFilenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(exportDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton1)
                    .addComponent(exportButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        closeSuccess.setText("Close");
        closeSuccess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSuccessActionPerformed(evt);
            }
        });

        successLabel.setText("Successfully Exported as ");

        javax.swing.GroupLayout successExportLayout = new javax.swing.GroupLayout(successExport.getContentPane());
        successExport.getContentPane().setLayout(successExportLayout);
        successExportLayout.setHorizontalGroup(
            successExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(successExportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(successLabel)
                .addContainerGap(156, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, successExportLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeSuccess)
                .addContainerGap())
        );
        successExportLayout.setVerticalGroup(
            successExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, successExportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(successLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeSuccess)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        SLOCTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SLOCTitle.setText("Software Product Size");

        SLOCDescription.setText("The model uses a product size expressed in source lines of code (SLOC). The bigger the size the larger the effort and the longer the schedule. ");

        SLOCInstruction.setText("Please estimate a range of SLOC and press enter after each input.");

        lowerBoundInput.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                lowerBoundInputInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        lowerBoundInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerBoundInputActionPerformed(evt);
            }
        });

        SDMTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SDMTitle.setText("Software Development Mode");
        SDMTitle.setEnabled(false);

        SDMLabel1.setText("The software project needs to be described with one of three development modes. These modes range from the familiar to the ambitious, tightly constrained development projects. ");
        SDMLabel1.setEnabled(false);

        SDMLabel2.setText("- Choose Organic for relatively small teams developing software in a highly familiar, in-house environment.");
        SDMLabel2.setEnabled(false);

        SDMLabel3.setText("- Choose Semi-Detached when the team members have some experience related to some aspects of the system under development but others do not. ");
        SDMLabel3.setEnabled(false);

        SDMLabel4.setText("- Choose Embedded if the project must operate within a strongly coupled complex of hardware, software, regulations, and operational procedures, such as real-time systems. ");
        SDMLabel4.setEnabled(false);

        SDMLabel5.setText("Choose One:");
        SDMLabel5.setEnabled(false);

        SDMGroup.add(organicMode);
        organicMode.setText("Organic");
        organicMode.setEnabled(false);
        organicMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organicModeActionPerformed(evt);
            }
        });

        SDMGroup.add(semiDetatchedMode);
        semiDetatchedMode.setText("Semi-Detatched");
        semiDetatchedMode.setEnabled(false);
        semiDetatchedMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semiDetatchedModeActionPerformed(evt);
            }
        });

        SDMGroup.add(Embedded);
        Embedded.setText("Embedded");
        Embedded.setEnabled(false);
        Embedded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmbeddedActionPerformed(evt);
            }
        });

        SDCTitle1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SDCTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SDCTitle1.setText("Product Attributes");
        SDCTitle1.setEnabled(false);

        SDCLabel1.setText("There are four categories of cost drivers that are found significant performance predictors for a software development project. Each category has several cost drivers.");
        SDCLabel1.setEnabled(false);

        SDCLabel2.setText("Driver ratings are Very Low (1), Low (2), Nominal (3), High (4), Very High (5), and Extra High (6). Some drivers may exclude some ratings. If unsure, set rating to 3.");
        SDCLabel2.setEnabled(false);

        DriverTitle1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle1.setText("Required Reliability");
        DriverTitle1.setEnabled(false);

        driverRating1.setMajorTickSpacing(1);
        driverRating1.setMaximum(6);
        driverRating1.setMinimum(1);
        driverRating1.setPaintLabels(true);
        driverRating1.setValue(3);
        driverRating1.setEnabled(false);
        driverRating1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFiveSliderStateChange(evt);
            }
        });

        DriverTitle2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle2.setText("Database Size");
        DriverTitle2.setEnabled(false);

        DriverTitle3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle3.setText("Product Complexity");
        DriverTitle3.setEnabled(false);

        driverRating3.setMajorTickSpacing(1);
        driverRating3.setMaximum(6);
        driverRating3.setMinimum(1);
        driverRating3.setPaintLabels(true);
        driverRating3.setValue(3);
        driverRating3.setEnabled(false);

        driverRating10.setMajorTickSpacing(1);
        driverRating10.setMaximum(6);
        driverRating10.setMinimum(1);
        driverRating10.setPaintLabels(true);
        driverRating10.setValue(3);
        driverRating10.setEnabled(false);
        driverRating10.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TwoToFiveSliderStateChange(evt);
            }
        });

        DriverTitle4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle4.setText("Execution Time Constraint");
        DriverTitle4.setEnabled(false);

        DriverTitle5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle5.setText("Main Storage Constraint");
        DriverTitle5.setEnabled(false);

        DriverTitle6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle6.setText("Virtual Machine Volatility");
        DriverTitle6.setEnabled(false);

        driverRating8.setMajorTickSpacing(1);
        driverRating8.setMaximum(6);
        driverRating8.setMinimum(1);
        driverRating8.setPaintLabels(true);
        driverRating8.setToolTipText("");
        driverRating8.setValue(3);
        driverRating8.setEnabled(false);
        driverRating8.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TwoToFiveSliderStateChange(evt);
            }
        });

        DriverTitle7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle7.setText("Computer Turnaround Time");
        DriverTitle7.setEnabled(false);

        driverRating9.setMajorTickSpacing(1);
        driverRating9.setMaximum(6);
        driverRating9.setMinimum(1);
        driverRating9.setPaintLabels(true);
        driverRating9.setValue(3);
        driverRating9.setEnabled(false);
        driverRating9.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TwoToFiveSliderStateChange(evt);
            }
        });

        DriverTitle8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle8.setText("Analyst Capability");
        DriverTitle8.setEnabled(false);

        driverRating15.setMajorTickSpacing(1);
        driverRating15.setMaximum(6);
        driverRating15.setMinimum(1);
        driverRating15.setPaintLabels(true);
        driverRating15.setValue(3);
        driverRating15.setEnabled(false);
        driverRating15.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFiveSliderStateChange(evt);
            }
        });

        driverRating14.setMajorTickSpacing(1);
        driverRating14.setMaximum(6);
        driverRating14.setMinimum(1);
        driverRating14.setPaintLabels(true);
        driverRating14.setValue(3);
        driverRating14.setEnabled(false);
        driverRating14.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFourSliderStateChange(evt);
            }
        });

        DriverTitle9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle9.setText("Programming Lang. Experience");
        DriverTitle9.setEnabled(false);

        driverRating13.setMajorTickSpacing(1);
        driverRating13.setMaximum(6);
        driverRating13.setMinimum(1);
        driverRating13.setPaintLabels(true);
        driverRating13.setValue(3);
        driverRating13.setEnabled(false);
        driverRating13.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFourSliderStateChange(evt);
            }
        });

        DriverTitle10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle10.setText("Virtual Machine Experience");
        DriverTitle10.setEnabled(false);

        DriverTitle11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle11.setText("Programmer Capability");
        DriverTitle11.setEnabled(false);

        driverRating12.setMajorTickSpacing(1);
        driverRating12.setMaximum(6);
        driverRating12.setMinimum(1);
        driverRating12.setPaintLabels(true);
        driverRating12.setValue(3);
        driverRating12.setEnabled(false);
        driverRating12.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFiveSliderStateChange(evt);
            }
        });

        driverRating11.setMajorTickSpacing(1);
        driverRating11.setMaximum(6);
        driverRating11.setMinimum(1);
        driverRating11.setPaintLabels(true);
        driverRating11.setValue(3);
        driverRating11.setEnabled(false);
        driverRating11.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFiveSliderStateChange(evt);
            }
        });

        DriverTitle12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle12.setText("Applications Experience");
        DriverTitle12.setEnabled(false);

        driverRating6.setMajorTickSpacing(1);
        driverRating6.setMaximum(6);
        driverRating6.setMinimum(1);
        driverRating6.setPaintLabels(true);
        driverRating6.setValue(3);
        driverRating6.setEnabled(false);
        driverRating6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFiveSliderStateChange(evt);
            }
        });

        DriverTitle13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle13.setText("Required Development Schedule");
        DriverTitle13.setEnabled(false);

        driverRating5.setMajorTickSpacing(1);
        driverRating5.setMaximum(6);
        driverRating5.setMinimum(1);
        driverRating5.setPaintLabels(true);
        driverRating5.setValue(3);
        driverRating5.setEnabled(false);
        driverRating5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFiveSliderStateChange(evt);
            }
        });

        DriverTitle14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle14.setText("Use of Software Tools");
        DriverTitle14.setEnabled(false);

        driverRating4.setMajorTickSpacing(1);
        driverRating4.setMaximum(6);
        driverRating4.setMinimum(1);
        driverRating4.setPaintLabels(true);
        driverRating4.setValue(3);
        driverRating4.setEnabled(false);
        driverRating4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                OneToFiveSliderStateChange(evt);
            }
        });

        DriverTitle15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle15.setText("Modern Programming Practices");
        DriverTitle15.setEnabled(false);

        SDCTitle2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SDCTitle2.setText("Software Development Cost Drivers");
        SDCTitle2.setEnabled(false);

        SDCTitle3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SDCTitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SDCTitle3.setText("Personnel Attributes");
        SDCTitle3.setEnabled(false);

        SDCTitle4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SDCTitle4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SDCTitle4.setText("Computer Attributes");
        SDCTitle4.setEnabled(false);

        SDCTitle5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SDCTitle5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SDCTitle5.setText("Project Attributes");
        SDCTitle5.setEnabled(false);

        submit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        submit.setText("Submit");
        submit.setEnabled(false);
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        driverRating7.setMajorTickSpacing(1);
        driverRating7.setMaximum(6);
        driverRating7.setMinimum(1);
        driverRating7.setPaintLabels(true);
        driverRating7.setValue(3);
        driverRating7.setEnabled(false);
        driverRating7.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ThreeToSixSliderStateChange(evt);
            }
        });

        DriverTitle16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle16.setText("(1 - 5)");
        DriverTitle16.setEnabled(false);

        DriverTitle17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle17.setText("(2 - 5)");
        DriverTitle17.setEnabled(false);

        DriverTitle18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle18.setText("(1 - 6)");
        DriverTitle18.setEnabled(false);

        DriverTitle19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle19.setText("(1 - 5)");
        DriverTitle19.setEnabled(false);

        DriverTitle20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle20.setText("(1 - 5)");
        DriverTitle20.setEnabled(false);

        DriverTitle21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle21.setText("(1 - 5)");
        DriverTitle21.setEnabled(false);

        DriverTitle22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle22.setText("(3- 6)");
        DriverTitle22.setEnabled(false);

        DriverTitle23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle23.setText("(2 - 5)");
        DriverTitle23.setEnabled(false);

        DriverTitle24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle24.setText("(2 - 5)");
        DriverTitle24.setEnabled(false);

        DriverTitle25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle25.setText("(2 - 5)");
        DriverTitle25.setEnabled(false);

        DriverTitle26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle26.setText("(1 - 5)");
        DriverTitle26.setEnabled(false);

        DriverTitle27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle27.setText("(1 - 5)");
        DriverTitle27.setEnabled(false);

        DriverTitle28.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle28.setText("(1 - 4)");
        DriverTitle28.setEnabled(false);

        DriverTitle29.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle29.setText("(1 - 4)");
        DriverTitle29.setEnabled(false);

        DriverTitle30.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DriverTitle30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DriverTitle30.setText("(1 - 5)");
        DriverTitle30.setEnabled(false);

        reset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reset.setText("Reset");
        reset.setEnabled(false);
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        lowerBoundLabel.setText("Lower Bound:");

        upperBoundLabel.setText("Upper Bound:");

        upperBoundInput.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                upperBoundInputInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        upperBoundInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperBoundInputActionPerformed(evt);
            }
        });

        driverRating2.setMajorTickSpacing(1);
        driverRating2.setMaximum(6);
        driverRating2.setMinimum(1);
        driverRating2.setPaintLabels(true);
        driverRating2.setValue(3);
        driverRating2.setEnabled(false);
        driverRating2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TwoToFiveSliderStateChange(evt);
            }
        });

        menuBar.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        cocomoHelp.setText("COCOMO");
        cocomoHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cocomoHelpActionPerformed(evt);
            }
        });
        helpMenu.add(cocomoHelp);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(SLOCDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SDCLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SDMLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SDMLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SDMLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SDMLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SDCLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SLOCInstruction)
                                .addGap(41, 41, 41)
                                .addComponent(lowerBoundLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lowerBoundInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(upperBoundLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upperBoundInput, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                .addComponent(DriverTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(SDCTitle1))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                .addComponent(DriverTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(DriverTitle3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(DriverTitle16, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(driverRating1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DriverTitle17, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DriverTitle18, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(driverRating2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(73, 73, 73)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                            .addComponent(driverRating6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DriverTitle13)
                                            .addComponent(driverRating5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DriverTitle14, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(driverRating4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DriverTitle15)
                                            .addComponent(SDCTitle5)
                                            .addComponent(DriverTitle19, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DriverTitle20, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(DriverTitle21, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(driverRating3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(submit)
                                        .addGap(14, 14, 14)
                                        .addComponent(reset)))
                                .addGap(73, 73, 73)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(DriverTitle5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverRating8, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle7, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverRating9, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverRating10, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SDCTitle4)
                                    .addComponent(driverRating7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle22, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle23, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle24, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle25, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(73, 73, 73)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(driverRating14, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle9, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverRating13, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle10, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle11, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverRating12, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverRating11, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle12, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle8, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(driverRating15, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SDCTitle3)
                                    .addComponent(DriverTitle26, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle27, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle28, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle29, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DriverTitle30, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(SDCTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SDMLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(organicMode)
                                .addGap(50, 50, 50)
                                .addComponent(semiDetatchedMode)
                                .addGap(50, 50, 50)
                                .addComponent(Embedded))
                            .addComponent(SDMTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SLOCTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SLOCTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SLOCDescription)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SLOCInstruction)
                    .addComponent(lowerBoundInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lowerBoundLabel)
                    .addComponent(upperBoundLabel)
                    .addComponent(upperBoundInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SDMTitle)
                .addGap(10, 10, 10)
                .addComponent(SDMLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SDMLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SDMLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SDMLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Embedded)
                    .addComponent(semiDetatchedMode)
                    .addComponent(organicMode)
                    .addComponent(SDMLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SDCTitle2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SDCLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SDCLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SDCTitle5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DriverTitle15)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SDCTitle3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SDCTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SDCTitle4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DriverTitle24, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DriverTitle5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(DriverTitle1)
                                                    .addGap(1, 1, 1)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(DriverTitle16)
                                                        .addComponent(DriverTitle19)
                                                        .addComponent(DriverTitle22)
                                                        .addComponent(DriverTitle26))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(driverRating1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(driverRating4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(driverRating7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(driverRating11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(DriverTitle2)
                                                        .addComponent(DriverTitle14)
                                                        .addComponent(DriverTitle6)
                                                        .addComponent(DriverTitle11))
                                                    .addGap(1, 1, 1)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(DriverTitle17)
                                                        .addComponent(DriverTitle20)
                                                        .addComponent(DriverTitle23)))
                                                .addComponent(DriverTitle27, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addComponent(DriverTitle12, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                    .addComponent(driverRating5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(driverRating8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(driverRating12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(driverRating2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(DriverTitle3)
                                            .addComponent(DriverTitle13)
                                            .addComponent(DriverTitle7)
                                            .addComponent(DriverTitle10))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(DriverTitle18)
                                            .addComponent(DriverTitle21)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DriverTitle28)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(driverRating3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(driverRating6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(driverRating9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(driverRating13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DriverTitle4)
                                    .addComponent(DriverTitle9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DriverTitle25)
                                    .addComponent(DriverTitle29))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(driverRating10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(driverRating14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DriverTitle8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DriverTitle30)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(driverRating15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(submit)
                                    .addComponent(reset))
                                .addContainerGap())))))
        );

        if (driverRating4.getValue() > 5)
        driverRating4.setValue(5);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void organicModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organicModeActionPerformed

        //confirms that the organic mode is exclusively chosen
        isOrganic = true;
        isSemi = false;
        isEmbedded = false;
        
        //enable the next section
        enableDrivers();
        enableSubmit();
        enableReset();
    }//GEN-LAST:event_organicModeActionPerformed

    private void semiDetatchedModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semiDetatchedModeActionPerformed
        
        //confirms that the semidetached mode is exclusively chosen
        isSemi = true;
        isOrganic = false;
        isEmbedded = false;
        
        //enable the next section
        enableDrivers();
        enableSubmit();
        enableReset();
        
    }//GEN-LAST:event_semiDetatchedModeActionPerformed

    private void EmbeddedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmbeddedActionPerformed
        
        //confirms that the embedded mode is exclusively chosen
        isEmbedded = true;
        isOrganic = false;
        isSemi = false;  
        
        //enable the next section
        enableDrivers();
        enableSubmit();
        enableReset();
    }//GEN-LAST:event_EmbeddedActionPerformed

 
    //Passes the SLOC from input to the objects
    private void lowerBoundInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerBoundInputActionPerformed
        
        SLLow = Integer.parseInt(lowerBoundInput.getText());   //parse the text from the
                                                               //text box to integer
        
        //Checks to make sure the text box is not blank and is greater than 0
        //Will add validation to make sure it's an integer soon -ke
        if (!lowerBoundInput.getText().equals("") && Integer.parseInt(lowerBoundInput.getText()) >= 0)
            lowerValid = true;
        
        //Check and make sure both the upper and lower text boxes have valid values
        //Then check and make sure the upper boundary is not less than the lower
        //Then enable the next mode
        if (upperValid && lowerValid)
            if (SLHigh >= SLLow)
                enableMode();
        
    }//GEN-LAST:event_lowerBoundInputActionPerformed

/*
*       
*   
*/
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed

        //if organic mode radio button is ticked, organic objects will be made
        if (isOrganic) {
            basicObj = new Basic_Organic();
            interObj = new Intermediate_Organic();
        }
        
        //if semidetached mode radio button is ticked, semidetached objects will be made
        else if (isSemi) {
            basicObj = new Basic_SemiDetached();
            interObj = new Intermediate_SemiDetached();   
        }
        
        //if embedded mode radio button is ticked, embedded objects will be made
        else if (isEmbedded) {
            basicObj = new Basic_Embedded();
            interObj = new Intermediate_Embedded();  
        }
        
        //else
            //error
        
        
        //Read the values from the sliders
        readSliders();
        
        //Set the converted values from the drivers into the class array
        interObj.setDrivers(d);
        
        
        //Set the text of the labels in the results screen
        //Divide SLLow and SLHigh to convert from SLOC to KSLOC
        //Multiplying by 100d and then dividing by 100d allows
        //decimals to be shown -ke
        basicCostLabelLow.setText(Double.toString((double)Math.round(basicObj.MM_Estimate(SLLow / 1000) * 100d) / 100d) + " MM");
        basicTimeLabelLow.setText(Double.toString((double)Math.round(basicObj.TDEV(SLLow / 1000) * 100d) / 100d) + " Months");
        interCostLabelLow.setText(Double.toString((double)Math.round(interObj.MM_Estimate(SLLow / 1000) * 100d) / 100d) + " MM");
        interTimeLabelLow.setText(Double.toString((double)Math.round(interObj.TDEV(SLLow / 1000) * 100d) / 100d) + " Months");
        basicCostLabelHigh.setText(Double.toString((double)Math.round(basicObj.MM_Estimate(SLHigh / 1000) * 100d) / 100d) + " MM");
        basicTimeLabelHigh.setText(Double.toString((double)Math.round(basicObj.TDEV(SLHigh / 1000) * 100d) / 100d) + " Months");
        interCostLabelHigh.setText(Double.toString((double)Math.round(interObj.MM_Estimate(SLHigh / 1000) * 100d) / 100d) + " MM");
        interTimeLabelHigh.setText(Double.toString((double)Math.round(interObj.TDEV(SLHigh / 1000) * 100d) / 100d) + " Months");
        
  
        /********
         * JFree does not come with a graph that can plot mathematical functions,
         * to overcome this I plotted the upper and lower bound SLOC and then
         * plotted 10 points between the two points to simulate a function
         * -ke
         ********/
        
        //BCC = Basic cost chart
        //BTC = Basic time chart
        //ICC = Intermediate cost chart
        //ITC = Intermediate time chart
        //-ke
        final XYSeries BCCvalues = new XYSeries("Cost vs. Source Lines of Code");
        final XYSeries BTCvalues = new XYSeries("Time vs. Source Lines of Code");
        final XYSeries ICCvalues = new XYSeries("Cost vs. Source Lines of Code");
        final XYSeries ITCvalues = new XYSeries("Time vs. Source Lines of Code");
        
        //this creates 10 values between the lower bound and 
        //upper bound for the graph plotting
        double increment = (SLHigh - SLLow) * .1;
        
        
        
        /*
        These for loops plot 10 points into the 4 tables
        */
        
        for (double i = SLLow; i <= SLHigh; i += increment) {
            double val = (basicObj.MM_Estimate((int) i / 1000) * 100d) / 100d;
            BCCvalues.add(i, val);
        }
        
        
        for (double i = SLLow; i <= SLHigh; i += increment) {
            double val = (basicObj.TDEV((int) i / 1000) * 100d) / 100d;
            BTCvalues.add(i, val);
        }
        
        
        for (double i = SLLow; i <= SLHigh; i += increment) {
            double val = (interObj.MM_Estimate((int) i / 1000) * 100d) / 100d;
            ICCvalues.add(i, val);
        }
        
        
        for (double i = SLLow; i <= SLHigh; i += increment) {
            double val = (interObj.TDEV((int) i / 1000) * 100d) / 100d;
            ITCvalues.add(i, val);
        }
        
        
        //Data that will be stored into the table
        final XYSeriesCollection BCCdata = new XYSeriesCollection();
        final XYSeriesCollection BTCdata = new XYSeriesCollection();
        final XYSeriesCollection ICCdata = new XYSeriesCollection();
        final XYSeriesCollection ITCdata = new XYSeriesCollection();
        
        //Add the values for the data
        BCCdata.addSeries(BCCvalues);
        BTCdata.addSeries(BTCvalues);
        ICCdata.addSeries(ICCvalues);
        ITCdata.addSeries(ITCvalues);

        
        /****
         * Panels that will display the functions and data
         * -ke
         *****/
        
        
        JFreeChart BCC = ChartFactory.createXYLineChart("Basic Cost Estimation", "SLOC", "Man-Months", BCCdata);
        BCC.setBackgroundPaint(Color.white);
        
        JFreeChart BTC = ChartFactory.createXYLineChart("Basic Development Time Estimation", "SLOC", "Months", BTCdata);
        BTC.setBackgroundPaint(Color.white);
        
        JFreeChart ICC = ChartFactory.createXYLineChart("Intermediate Cost Estimation", "SLOC", "Man-Months", ICCdata);
        ICC.setBackgroundPaint(Color.white);
        
        JFreeChart ITC = ChartFactory.createXYLineChart("Intermediate Development Time Estimation", "SLOC", "Months", ITCdata);
        ITC.setBackgroundPaint(Color.white);
        
        ChartPanel BCCpanel = new ChartPanel(BCC);
        ChartPanel BTCpanel = new ChartPanel(BTC);
        ChartPanel ICCpanel = new ChartPanel(ICC);
        ChartPanel ITCpanel = new ChartPanel(ITC);
        
        BCCpanel.setBounds(10, 10, 400, 400);
        BTCpanel.setBounds(10, 420, 400, 400);
        ICCpanel.setBounds(420, 10, 400, 400);
        ITCpanel.setBounds(420, 420, 400, 400);
        
        
        
        //Put the tables onto the jframe
        tableFrame.add(BCCpanel, 0, 0);
        tableFrame.add(BTCpanel, 1, 0);
        tableFrame.add(ICCpanel, 0, 1);
        tableFrame.add(ITCpanel, 1, 1);
        
 
        
        
        //Show the results screen
        Results.setBounds(50, 50, 720, 336);
        Results.setVisible(true);
        tableFrame.setBounds(820, 50, 850, 880);
        tableFrame.setVisible(true);
    }//GEN-LAST:event_submitActionPerformed

    
    
    
    
    
    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        
        //Reset all of the stuff
        lowerBoundInput.setText("");
        upperBoundInput.setText("");
        disableDrivers();
        disableMode();
        disableSubmit();
        disableReset();
        SDMGroup.clearSelection();
    }//GEN-LAST:event_resetActionPerformed

    
    //Reads the value of a slider that goes from 1 to 5 -ke
    private void OneToFiveSliderStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_OneToFiveSliderStateChange

         javax.swing.JSlider source = (javax.swing.JSlider)evt.getSource();
         
         //If the slider value is greater than 5 it defaults to 5
         if (source.getValue() > 5)
             source.setValue(5);
        
    }//GEN-LAST:event_OneToFiveSliderStateChange


    
    private void upperBoundInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperBoundInputActionPerformed
        
        SLHigh = Integer.parseInt(upperBoundInput.getText());   
        if (!upperBoundInput.getText().equals("") && Integer.parseInt(upperBoundInput.getText()) >= 0)
            upperValid = true;
        
        if (upperValid && lowerValid)
            if (SLHigh >= SLLow)
                enableMode();
    }//GEN-LAST:event_upperBoundInputActionPerformed

    private void TwoToFiveSliderStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TwoToFiveSliderStateChange
         javax.swing.JSlider source = (javax.swing.JSlider)evt.getSource();
         
         if (source.getValue() > 5)
             source.setValue(5);
         
         else if (source.getValue() < 2)
             source.setValue(2);
    }//GEN-LAST:event_TwoToFiveSliderStateChange

    private void OneToFourSliderStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_OneToFourSliderStateChange
        
         javax.swing.JSlider source = (javax.swing.JSlider)evt.getSource();
         
         if (source.getValue() > 4)
             source.setValue(4);
    }//GEN-LAST:event_OneToFourSliderStateChange

    private void ThreeToSixSliderStateChange(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ThreeToSixSliderStateChange
        
         javax.swing.JSlider source = (javax.swing.JSlider)evt.getSource();
        
         if (source.getValue() < 3)
             source.setValue(3);
    }//GEN-LAST:event_ThreeToSixSliderStateChange

    private void lowerBoundInputInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_lowerBoundInputInputMethodTextChanged
      
        SLLow = Integer.parseInt(lowerBoundInput.getText());   
        
        //Check if the input is greater than or equal to 0
        if (!lowerBoundInput.getText().equals("") && Integer.parseInt(lowerBoundInput.getText()) >= 0)
            lowerValid = true;
        
        //Check if the lower boundary is less than or equal
        //to the greater boundary
        if (upperValid && lowerValid)
            if (SLHigh >= SLLow)
                enableMode();
        
    }//GEN-LAST:event_lowerBoundInputInputMethodTextChanged

    private void upperBoundInputInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_upperBoundInputInputMethodTextChanged
        
        
        SLHigh = Integer.parseInt(upperBoundInput.getText());  
        
        //Check if the input is greater than or equal to 0
        if (!upperBoundInput.getText().equals("") && Integer.parseInt(upperBoundInput.getText()) >= 0)
            upperValid = true;
        
        //Check if the higher boundary is greater than or equal
        //to the lower boundary
        if (upperValid && lowerValid)
            if (SLHigh >= SLLow)
                enableMode();       //enable the next section of the program
        
    }//GEN-LAST:event_upperBoundInputInputMethodTextChanged

    private void saveTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_saveTextFieldInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_saveTextFieldInputMethodTextChanged

    private void saveTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveTextFieldActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        
    try{
        PrintWriter writer = new PrintWriter(filename, "UTF-8");
        //writer.println();
        //writer.println();
        writer.close();
    } catch (IOException e) {
        // do something
        
    }
    
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        saveDialog.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cocomoHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cocomoHelpActionPerformed
            // TODO add your handling code here:
            cocomoHelpFrame.setBounds(660, 240, 680, 610);
            helpText.setEditable(false);
            cocomoHelpFrame.setVisible(true);
    }//GEN-LAST:event_cocomoHelpActionPerformed

    private void exportResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportResultsButtonActionPerformed
        
        exportDialog.setBounds(760, 390, 453, 141);
        exportDialog.setVisible(true);

    }//GEN-LAST:event_exportResultsButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        Results.dispose();
        tableFrame.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed

        
        Document document = new Document(PageSize.A4);        
        
        try {

            PdfWriter.getInstance(document, new FileOutputStream(filename + ".pdf"));
            document.open();
            Paragraph info = new Paragraph("Project Information", catFont);
            info.add(new Paragraph("Type: " + basicObj.getType()));
            info.add(new Paragraph("Lower SLOC: " + Integer.toString(SLLow)));
            info.add(new Paragraph("Upper SLOC: " + Integer.toString(SLHigh)));
            addEmptyLine(info, 2);
            document.add(info);
            
            Paragraph basicEst = new Paragraph("Basic COCOMO Estimations", catFont);
            basicEst.add(new Paragraph("Estimation based on lower SLOC: " + Double.toString((double)Math.round(basicObj.MM_Estimate(SLLow / 1000) * 100d) / 100d) + " MM"));
            basicEst.add(new Paragraph("Estimation based on upper SLOC: " + Double.toString((double)Math.round(basicObj.MM_Estimate(SLHigh / 1000) * 100d) / 100d) + " MM"));
            basicEst.add(new Paragraph("Development Time based upon lower SLOC: " + Double.toString((double)Math.round(basicObj.TDEV(SLLow / 1000) * 100d) / 100d) + " Months"));
            basicEst.add(new Paragraph("Development Time based upon upper SLOC: " + Double.toString((double)Math.round(basicObj.TDEV(SLHigh / 1000) * 100d) / 100d) + " Months"));
            addEmptyLine(basicEst, 2);
            document.add(basicEst);
            
            Paragraph interEst = new Paragraph("Intermediate COCOMO Estimations", catFont);
            interEst.add(new Paragraph("Estimation based on lower SLOC: " + Double.toString((double)Math.round(interObj.MM_Estimate(SLLow / 1000) * 100d) / 100d) + " MM"));
            interEst.add(new Paragraph("Estimation based on upper SLOC: " + Double.toString((double)Math.round(interObj.MM_Estimate(SLHigh / 1000) * 100d) / 100d) + " MM"));
            interEst.add(new Paragraph("Development Time based upon lower SLOC: " + Double.toString((double)Math.round(interObj.TDEV(SLLow / 1000) * 100d) / 100d) + " Months"));
            interEst.add(new Paragraph("Development Time based upon upper SLOC: " + Double.toString((double)Math.round(interObj.TDEV(SLHigh / 1000) * 100d) / 100d) + " Months"));
            addEmptyLine(interEst, 1);
            interEst.add(new Paragraph("Cost Drivers", subFont));
            addDrivers(interEst);
            document.add(interEst);
            
        }
        catch (Exception e){
            e.printStackTrace();
        }
        
        document.close();
        
        exportTextField.setText("");
        exportDialog.dispose();
        successExport.setBounds(760, 390, 412, 174);
        successExport.setVisible(true);
        successLabel.setText("Successfully Exported as " + filename + ".pdf");
        
    }//GEN-LAST:event_exportButtonActionPerformed

    private void exportTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_exportTextFieldInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_exportTextFieldInputMethodTextChanged

    private void exportTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTextFieldActionPerformed
        // TODO add your handling code here:
        filename = exportTextField.getText();
        
        if (exportTextField.getText() != "")
            exportButton.setEnabled(true);
    }//GEN-LAST:event_exportTextFieldActionPerformed

    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        // TODO add your handling code here:
        exportTextField.setText("");
        exportDialog.dispose();
    }//GEN-LAST:event_cancelButton1ActionPerformed

    private void closeSuccessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSuccessActionPerformed
        // TODO add your handling code here:
        successExport.dispose();
    }//GEN-LAST:event_closeSuccessActionPerformed


    private static void addEmptyLine(Paragraph paragraph, int number) {
                for (int i = 0; i < number; i++) {
                        paragraph.add(new Paragraph(" "));
                }
        }
    
    
    
    
    public String ratingToString(int rating)
    {
        
        String text;
        
        switch (rating) {
            
            case 1:
                text = "Very Low";
                break;
            
            case 2:
                text = "Low";
                break;
                
            case 3:
                text = "Nominal";
                break;
                
            case 4:
                text = "High";
                break;
                
            case 5:
                text = "Very High";
                break;
                
            case 6:
                text = "Extra High";
                break;
                
            default:
                text = "Nominal";
                break;
            
        }
        
        return text;
    }
    
    
    public void addDrivers(Paragraph inter) {
        
        inter.add(new Paragraph("Product Attributes", driverFont));
        inter.add(new Paragraph("         Required Software Reliability: " + ratingToString(driverRating1.getValue())));
        inter.add(new Paragraph("         Database Size: " + ratingToString(driverRating2.getValue())));
        inter.add(new Paragraph("         Product Complexity: " + ratingToString(driverRating3.getValue())));
        
        inter.add(new Paragraph("Project Attributes", driverFont));
        inter.add(new Paragraph("         Modern Programming Practices: " + ratingToString(driverRating4.getValue())));
        inter.add(new Paragraph("         Use of Software Tools: " + ratingToString(driverRating5.getValue())));
        inter.add(new Paragraph("         Required Development Schedule: " + ratingToString(driverRating6.getValue())));
        
        inter.add(new Paragraph("Computer Attributes", driverFont));
        inter.add(new Paragraph("         Main Storage Constraint: " + ratingToString(driverRating7.getValue())));
        inter.add(new Paragraph("         Virtual Machine Volatility: " + ratingToString(driverRating8.getValue())));
        inter.add(new Paragraph("         Computer Turnaround Time: " + ratingToString(driverRating9.getValue())));
        inter.add(new Paragraph("         Execution Time Constraint: " + ratingToString(driverRating10.getValue())));
        
        inter.add(new Paragraph("Personnel Attributes", driverFont));
        inter.add(new Paragraph("         Applications Experience: " + ratingToString(driverRating11.getValue())));
        inter.add(new Paragraph("         Programmer Capability: " + ratingToString(driverRating12.getValue())));
        inter.add(new Paragraph("         Virtual Machine Experience: " + ratingToString(driverRating13.getValue())));
        inter.add(new Paragraph("         Programming Language Experience: " + ratingToString(driverRating14.getValue())));
        inter.add(new Paragraph("         Analyst Capability: " + ratingToString(driverRating15.getValue())));
        
        
    }
    
    
    public void addRating() {
        
        
        
    }
    
    
    
    
    
    
    //This function changes all the text and radio buttons in the Software
    //Development Mode section to enabled status
    //Function will be called SLOC is inputted
    public void enableMode() {
        
        SDMTitle.setEnabled(true);
        SDMLabel1.setEnabled(true);
        SDMLabel2.setEnabled(true);
        SDMLabel3.setEnabled(true);
        SDMLabel4.setEnabled(true);
        SDMLabel5.setEnabled(true);
        Embedded.setEnabled(true);
        semiDetatchedMode.setEnabled(true);
        organicMode.setEnabled(true);

    }
    
        public void disableMode() {
        
        SDMTitle.setEnabled(false);
        SDMLabel1.setEnabled(false);
        SDMLabel2.setEnabled(false);
        SDMLabel3.setEnabled(false);
        SDMLabel4.setEnabled(false);
        SDMLabel5.setEnabled(false);
        Embedded.setEnabled(false);
        semiDetatchedMode.setEnabled(false);
        organicMode.setEnabled(false);

    }
    
    
    //This changes all the text and sliders in the Software Development Cost
    //section to enabled status
    //Function will be called after a development mode is chosen
    public void enableDrivers() {
        
        SDCTitle1.setEnabled(true);
        SDCTitle2.setEnabled(true);
        SDCTitle3.setEnabled(true);
        SDCTitle4.setEnabled(true);
        SDCTitle5.setEnabled(true);
        SDCLabel1.setEnabled(true);
        SDCLabel2.setEnabled(true);
        DriverTitle1.setEnabled(true);
        DriverTitle2.setEnabled(true);
        DriverTitle3.setEnabled(true);
        DriverTitle4.setEnabled(true);
        DriverTitle5.setEnabled(true);
        DriverTitle6.setEnabled(true);
        DriverTitle7.setEnabled(true);
        DriverTitle8.setEnabled(true);
        DriverTitle9.setEnabled(true);
        DriverTitle10.setEnabled(true);
        DriverTitle11.setEnabled(true);
        DriverTitle12.setEnabled(true);
        DriverTitle13.setEnabled(true);
        DriverTitle14.setEnabled(true);
        DriverTitle15.setEnabled(true);
        DriverTitle16.setEnabled(true);
        DriverTitle17.setEnabled(true);
        DriverTitle18.setEnabled(true);
        DriverTitle19.setEnabled(true);
        DriverTitle20.setEnabled(true);
        DriverTitle21.setEnabled(true);
        DriverTitle22.setEnabled(true);
        DriverTitle23.setEnabled(true);
        DriverTitle24.setEnabled(true);
        DriverTitle25.setEnabled(true);
        DriverTitle26.setEnabled(true);
        DriverTitle27.setEnabled(true);
        DriverTitle28.setEnabled(true);
        DriverTitle29.setEnabled(true);
        DriverTitle30.setEnabled(true);
        driverRating1.setEnabled(true);
        driverRating2.setEnabled(true);
        driverRating3.setEnabled(true);
        driverRating4.setEnabled(true);
        driverRating5.setEnabled(true);
        driverRating6.setEnabled(true);
        driverRating7.setEnabled(true);
        driverRating8.setEnabled(true);
        driverRating9.setEnabled(true);
        driverRating10.setEnabled(true);
        driverRating11.setEnabled(true);
        driverRating12.setEnabled(true);
        driverRating13.setEnabled(true);
        driverRating14.setEnabled(true);
        driverRating15.setEnabled(true);
    }
    
    public void disableDrivers() {
                
        SDCTitle1.setEnabled(false);
        SDCTitle2.setEnabled(false);
        SDCTitle3.setEnabled(false);
        SDCTitle4.setEnabled(false);
        SDCTitle5.setEnabled(false);
        SDCLabel1.setEnabled(false);
        SDCLabel2.setEnabled(false);
        DriverTitle1.setEnabled(false);
        DriverTitle2.setEnabled(false);
        DriverTitle3.setEnabled(false);
        DriverTitle4.setEnabled(false);
        DriverTitle5.setEnabled(false);
        DriverTitle6.setEnabled(false);
        DriverTitle7.setEnabled(false);
        DriverTitle8.setEnabled(false);
        DriverTitle9.setEnabled(false);
        DriverTitle10.setEnabled(false);
        DriverTitle11.setEnabled(false);
        DriverTitle12.setEnabled(false);
        DriverTitle13.setEnabled(false);
        DriverTitle14.setEnabled(false);
        DriverTitle15.setEnabled(false);
        DriverTitle16.setEnabled(false);
        DriverTitle17.setEnabled(false);
        DriverTitle18.setEnabled(false);
        DriverTitle19.setEnabled(false);
        DriverTitle20.setEnabled(false);
        DriverTitle21.setEnabled(false);
        DriverTitle22.setEnabled(false);
        DriverTitle23.setEnabled(false);
        DriverTitle24.setEnabled(false);
        DriverTitle25.setEnabled(false);
        DriverTitle26.setEnabled(false);
        DriverTitle27.setEnabled(false);
        DriverTitle28.setEnabled(false);
        DriverTitle29.setEnabled(false);
        DriverTitle30.setEnabled(false);
        driverRating1.setEnabled(false);
        driverRating2.setEnabled(false);
        driverRating3.setEnabled(false);
        driverRating4.setEnabled(false);
        driverRating5.setEnabled(false);
        driverRating6.setEnabled(false);
        driverRating7.setEnabled(false);
        driverRating8.setEnabled(false);
        driverRating9.setEnabled(false);
        driverRating10.setEnabled(false);
        driverRating11.setEnabled(false);
        driverRating12.setEnabled(false);
        driverRating13.setEnabled(false);
        driverRating14.setEnabled(false);
        driverRating15.setEnabled(false);
        
        
        
        driverRating1.setValue(3);
        driverRating2.setValue(3);
        driverRating3.setValue(3);
        driverRating4.setValue(3);
        driverRating5.setValue(3);
        driverRating6.setValue(3);
        driverRating7.setValue(3);
        driverRating8.setValue(3);
        driverRating9.setValue(3);
        driverRating10.setValue(3);
        driverRating11.setValue(3);
        driverRating12.setValue(3);
        driverRating13.setValue(3);
        driverRating14.setValue(3);
        driverRating15.setValue(3);
        
        
    }
    
    //enable the submit button
    public void enableSubmit() {
        submit.setEnabled(true);
    }
    
    public void disableSubmit() {
        submit.setEnabled(false);
    }
    
    
    public void enableReset() {
        reset.setEnabled(true);
    }
    
    //disable the reset button
    public void disableReset() {
        reset.setEnabled(false);
    }
    
    //calls all of the slider functions
    public void readSliders() {
        
        readSlider1();
        readSlider2();
        readSlider3();
        readSlider4();
        readSlider5();
        readSlider6();
        readSlider7();
        readSlider8();
        readSlider9();
        readSlider10();
        readSlider11();
        readSlider12();
        readSlider13();
        readSlider14();
        readSlider15();
    }
    

    /*********************
    * Product Attributes *
    **********************/
    
    //Required Reliability
    public void readSlider1() {
        
        switch (driverRating1.getValue()) {
            case 1: 
                d[0] = 0.75;
                break;
                
            case 2: 
                d[0] = 0.88;
                break;
                
            case 3:
                d[0] = 1.00;
                break;
                
            case 4: 
                d[0] = 1.15;
                break;
                
            case 5:
                d[0] = 1.40;
                break;
            
            default:
                d[0] = 1.00;
                break;
        }
    }
    
    //Database Size
    public void readSlider2() {
 
        switch (driverRating2.getValue()) {
            case 2: 
                d[1] = 0.94;
                break;
                
            case 3:
                d[1] = 1.00;
                break;
                
            case 4: 
                d[1] = 1.08;
                break;
                
            case 5:
                d[1] = 1.16;
                break;
            
            default:
                d[1] = 1.00;
                break;
        }        
    }   
    
    //Product Complexity
    public void readSlider3() {

        switch (driverRating3.getValue()) {
            case 1: 
                d[2] = 0.70;
                break;
                
            case 2: 
                d[2] = 0.85;
                break;
                
            case 3:
                d[2] = 1.00;
                break;
                
            case 4: 
                d[2] = 1.15;
                break;
                
            case 5:
                d[2] = 1.30;
                break;
                
            case 6:
                d[2] = 1.65;
                break;
            
            default:
                d[2] = 1.00;
                break;
        }       
    }   
    
    

    /*********************
    * Project Attributes *
    **********************/
    
    //Modern Programming Practices
    public void readSlider4() {

        switch (driverRating4.getValue()) {
            case 1: 
                d[3] = 1.24;
                break;
                
            case 2: 
                d[3] = 1.10;
                break;
                
            case 3:
                d[3] = 1.00;
                break;
                
            case 4: 
                d[3] = 0.91;
                break;
                
            case 5:
                d[3] = 0.82;
                break;
            
            default:
                d[3] = 1.00;
                break;
        }        
    }    
    
    //Use of Software Tools
    public void readSlider5() {

        switch (driverRating5.getValue()) {
            case 1: 
                d[4] = 1.24;
                break;
                
            case 2: 
                d[4] = 1.10;
                break;
                
            case 3:
                d[4] = 1.00;
                break;
                
            case 4: 
                d[4] = 0.91;
                break;
                
            case 5:
                d[4] = 0.83;
                break;
            
            default:
                d[4] = 1.00;
                break;
        }      
    } 
    
    //Required Development Schedule
    public void readSlider6() {

        switch (driverRating6.getValue()) {
            case 1: 
                d[5] = 1.23;
                break;
                
            case 2: 
                d[5] = 1.08;
                break;
                
            case 3:
                d[5] = 1.00;
                break;
                
            case 4: 
                d[5] = 1.04;
                break;
                
            case 5:
                d[5] = 1.10;
                break;
            
            default:
                d[5] = 1.00;
                break;
        }        
    } 
    
    

    /**********************
    * Computer Attributes *
    ***********************/
    
    //Main Storage Constraint
    public void readSlider7() {

        switch (driverRating7.getValue()) {
            case 3:
                d[6] = 1.00;
                break;
                
            case 4: 
                d[6] = 1.06;
                break;
                
            case 5:
                d[6] = 1.21;
                break;
            
            case 6:
                d[6] = 1.56;
                break;
                
            default:
                d[6] = 1.00;
                break;
        }        
    } 
    
    //Virtual Machine Volatility
    public void readSlider8() {

        switch (driverRating8.getValue()) {
            case 2: 
                d[7] = 0.87;
                break;
                
            case 3:
                d[7] = 1.00;
                break;
                
            case 4: 
                d[7] = 1.15;
                break;
                
            case 5:
                d[7] = 1.30;
                break;
            
            default:
                d[7] = 1.00;
                break;
        }        
    } 
 
    //Computer Turnaround Time
    public void readSlider9() {
 
        switch (driverRating9.getValue()) {
            case 2: 
                d[8] = 0.87;
                break;
                
            case 3:
                d[8] = 1.00;
                break;
                
            case 4: 
                d[8] = 1.07;
                break;
                
            case 5:
                d[8] = 1.15;
                break;
            
            default:
                d[8] = 1.00;
                break;
        }        
    } 
    
    //Execution Time Constraint
    public void readSlider10() {

        switch (driverRating10.getValue()) {
            case 3:
                d[9] = 1.00;
                break;
                
            case 4: 
                d[9] = 1.11;
                break;
                
            case 5:
                d[9] = 1.30;
                break;
            
            case 6:
                d[9] = 1.66;
                break;
                
            default:
                d[9] = 1.00;
                break;
        }        
    } 
    
    
    
    /***********************
    * Personnel Attributes *
    ************************/
    
    //Applications Experience
    public void readSlider11() {
 
        switch (driverRating11.getValue()) {
            case 1: 
                d[10] = 1.29;
                break;
                
            case 2: 
                d[10] = 1.13;
                break;
                
            case 3:
                d[10] = 1.00;
                break;
                
            case 4: 
                d[10] = 0.91;
                break;
                
            case 5:
                d[10] = 0.82;
                break;
            
            default:
                d[10] = 1.00;
                break;
        }
    } 
    
    //Programmer Capability
    public void readSlider12() {

        switch (driverRating12.getValue()) {
            case 1: 
                d[11] = 1.42;
                break;
                
            case 2: 
                d[11] = 1.17;
                break;
                
            case 3:
                d[11] = 1.00;
                break;
                
            case 4: 
                d[11] = 0.86;
                break;
                
            case 5:
                d[11] = 0.70;
                break;
            
            default:
                d[11] = 1.00;
                break;
        }        
    } 
    
    //Virtual Machine Experience
    public void readSlider13() {

        switch (driverRating13.getValue()) {
            case 1: 
                d[12] = 1.21;
                break;
                
            case 2: 
                d[12] = 1.10;
                break;
                
            case 3:
                d[12] = 1.00;
                break;
                
            case 4: 
                d[12] = 0.90;
                break;
                
            default:
                d[12] = 1.00;
                break;
        }        
    } 
    
    //Programming Language Experience
    public void readSlider14() {

        switch (driverRating14.getValue()) {
            case 1: 
                d[13] = 1.14;
                break;
                
            case 2: 
                d[13] = 1.07;
                break;
                
            case 3:
                d[13] = 1.00;
                break;
                
            case 4: 
                d[13] = 0.95;
                break;
            
            default:
                d[13] = 1.00;
                break;
        }
    } 
    
    //Analyst Capability
    public void readSlider15() {

        switch (driverRating15.getValue()) {
            case 1: 
                d[14] = 1.46;
                break;
                
            case 2: 
                d[14] = 1.19;
                break;
                
            case 3:
                d[14] = 1.00;
                break;
                
            case 4: 
                d[14] = 0.86;
                break;
                
            case 5:
                d[14] = 0.71;
                break;
            
            default:
                d[14] = 1.00;
                break;
        }        
    } 
    
    
    /*
     * Hash Salt function in order to secure manager password
     */
    /*void hashSalt(string) {
    
    
    
    
    }
    */

    

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CocoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CocoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CocoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CocoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CocoGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DriverTitle1;
    private javax.swing.JLabel DriverTitle10;
    private javax.swing.JLabel DriverTitle11;
    private javax.swing.JLabel DriverTitle12;
    private javax.swing.JLabel DriverTitle13;
    private javax.swing.JLabel DriverTitle14;
    private javax.swing.JLabel DriverTitle15;
    private javax.swing.JLabel DriverTitle16;
    private javax.swing.JLabel DriverTitle17;
    private javax.swing.JLabel DriverTitle18;
    private javax.swing.JLabel DriverTitle19;
    private javax.swing.JLabel DriverTitle2;
    private javax.swing.JLabel DriverTitle20;
    private javax.swing.JLabel DriverTitle21;
    private javax.swing.JLabel DriverTitle22;
    private javax.swing.JLabel DriverTitle23;
    private javax.swing.JLabel DriverTitle24;
    private javax.swing.JLabel DriverTitle25;
    private javax.swing.JLabel DriverTitle26;
    private javax.swing.JLabel DriverTitle27;
    private javax.swing.JLabel DriverTitle28;
    private javax.swing.JLabel DriverTitle29;
    private javax.swing.JLabel DriverTitle3;
    private javax.swing.JLabel DriverTitle30;
    private javax.swing.JLabel DriverTitle4;
    private javax.swing.JLabel DriverTitle5;
    private javax.swing.JLabel DriverTitle6;
    private javax.swing.JLabel DriverTitle7;
    private javax.swing.JLabel DriverTitle8;
    private javax.swing.JLabel DriverTitle9;
    private javax.swing.JRadioButton Embedded;
    private javax.swing.JFrame Results;
    private javax.swing.JLabel SDCLabel1;
    private javax.swing.JLabel SDCLabel2;
    private javax.swing.JLabel SDCTitle1;
    private javax.swing.JLabel SDCTitle2;
    private javax.swing.JLabel SDCTitle3;
    private javax.swing.JLabel SDCTitle4;
    private javax.swing.JLabel SDCTitle5;
    private javax.swing.ButtonGroup SDMGroup;
    private javax.swing.JLabel SDMLabel1;
    private javax.swing.JLabel SDMLabel2;
    private javax.swing.JLabel SDMLabel3;
    private javax.swing.JLabel SDMLabel4;
    private javax.swing.JLabel SDMLabel5;
    private javax.swing.JLabel SDMTitle;
    private javax.swing.JLabel SLOCDescription;
    private javax.swing.JLabel SLOCInstruction;
    private javax.swing.JLabel SLOCTitle;
    private javax.swing.JLabel basicCostLabelHigh;
    private javax.swing.JLabel basicCostLabelLow;
    private javax.swing.JLabel basicTimeLabelHigh;
    private javax.swing.JLabel basicTimeLabelLow;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelButton1;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton closeSuccess;
    private javax.swing.JMenuItem cocomoHelp;
    private javax.swing.JFrame cocomoHelpFrame;
    private javax.swing.JLabel costLabel7;
    private javax.swing.JSlider driverRating1;
    private javax.swing.JSlider driverRating10;
    private javax.swing.JSlider driverRating11;
    private javax.swing.JSlider driverRating12;
    private javax.swing.JSlider driverRating13;
    private javax.swing.JSlider driverRating14;
    private javax.swing.JSlider driverRating15;
    private javax.swing.JSlider driverRating2;
    private javax.swing.JSlider driverRating3;
    private javax.swing.JSlider driverRating4;
    private javax.swing.JSlider driverRating5;
    private javax.swing.JSlider driverRating6;
    private javax.swing.JSlider driverRating7;
    private javax.swing.JSlider driverRating8;
    private javax.swing.JSlider driverRating9;
    private javax.swing.JButton exportButton;
    private javax.swing.JDialog exportDialog;
    private java.awt.Label exportFilenameLabel;
    private javax.swing.JButton exportResultsButton;
    public javax.swing.JTextField exportTextField;
    private java.awt.Label filenameLabel;
    private javax.swing.JMenu helpMenu;
    public javax.swing.JTextArea helpText;
    private javax.swing.JLabel highCostLabel16;
    private javax.swing.JLabel highCostLabel17;
    private javax.swing.JLabel interCostLabelHigh;
    private javax.swing.JLabel interCostLabelLow;
    private javax.swing.JLabel interTimeLabelHigh;
    private javax.swing.JLabel interTimeLabelLow;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lowCostLabel16;
    private javax.swing.JLabel lowCostLabel17;
    private javax.swing.JTextField lowerBoundInput;
    private javax.swing.JLabel lowerBoundLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton organicMode;
    private javax.swing.JButton reset;
    private javax.swing.JButton saveButton;
    private javax.swing.JDialog saveDialog;
    public javax.swing.JTextField saveTextField;
    private javax.swing.JRadioButton semiDetatchedMode;
    private javax.swing.JButton submit;
    private javax.swing.JDialog successExport;
    private javax.swing.JLabel successLabel;
    private javax.swing.JFrame tableFrame;
    private javax.swing.JLabel timeLabel7;
    private javax.swing.JTextField upperBoundInput;
    private javax.swing.JLabel upperBoundLabel;
    // End of variables declaration//GEN-END:variables
}
